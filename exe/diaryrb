#!/usr/bin/env ruby

require 'diary-ruby'
require 'slop'
require 'launchy'
require 'thread'

DEFAULT_DIARY = "diaryrb.store"

# prompt_for_password = false
opts = Slop.parse do |o|
  o.string '-d', '--diary', "choose diary storage file (leave blank for default, #{DEFAULT_DIARY})"
  # o.string '-c', '--configuration', 'config file location'
  # o.string '-p', '--passphrase', 'Use given encryption passphrase or prompt if option is used but no passphrase is given.', default: false do |v|
  #   if v.start_with?('-') || v.nil? || v.strip.size == 0
  #     prompt_for_password = true
  #   end
  # end

  # usage modes
  o.separator ''
  o.separator "Actions (can't be used in combination):"
  o.bool '-x', '--export', 'export all entries immediately to JSON'
  o.string '-e', '--edit', 'edit a specific post'
  o.bool '-l', '--list', 'list all posts by date'
  o.string '-t', '--tag', 'list entries, filtered by tag'
  o.bool '-s', '--serve', 'start Diary webserver'

  o.separator ''
  o.separator 'Other options:'
  o.bool '-v', '--verbose', 'enable verbose mode'
  o.on '-V', '--version', 'print the version and quit' do
    puts "diaryrb #{ Diary::VERSION }"
    exit
  end
  o.on '-h', '--help', 'show help and quit' do
    puts o
    exit
  end
end

# Global config options
Diary::Configuration.verbose = opts.verbose?

# Get diary name from configuration or command line
_diary = DEFAULT_DIARY
if opts[:diary]
  # ALWAYS prefer the given argument
  _diary = opts[:diary]
elsif Diary::Configuration.exists?
  if Diary::Configuration.has_diary_config?('default')
    Diary.debug "LOADING default DIARY"
    _diary = 'default'
    Diary::Configuration.load_config('default')
  else
    Diary.debug "CONFIG EXISTS, NO DEFAULT. LOADING DIARY #{ _diary }"
  end
end

Diary::Configuration.current_diary = _diary

diary_path = Diary::Configuration.path || Diary::Configuration.current_diary
database = Diary::Database.new(diary_path)

# make sure we're always up to date
migrator = Diary::Migrator.new(database)
migrator.migrate!

# initialize ORM
Diary::Model.connection = database

if opts.export?
  puts ''

  if Diary::Entry.count == 0
    puts "No entries"
    exit
  else
    require 'json'

    output = []

    Diary::Entry.order('created_at DESC').each do |entry|
      output << entry.to_hash
    end

    puts JSON.pretty_generate(output)
  end
elsif opts.list?
  puts ''
  if Diary::Entry.count == 0
    puts "No entries"
    exit
  else
    Diary::Entry.order('created_at DESC').each do |entry|
      puts entry.summary
    end
  end
elsif opts[:tag] && (tag_id = Diary::Model.select_value('select rowid from tags where name = ?', opts[:tag]))
  entry_ids = Diary::Model.select_values('select entry_id from taggings where tag_id = ?', tag_id)
  Diary::Entry.where(date_key: entry_ids).each do |entry|
    puts entry.summary
  end
elsif opts.serve?
  # Diary::Server.store = $store
  t = Thread.new do
    Diary::Server.run!
  end
  Launchy.open('http://localhost:4567')
  t.join
else
  def finish(file)
    file.close
    file.unlink   # deletes the temp file
  end

  def parse_and_store(file)
    diary_entry = Diary::Parser.parse_file(file)
    diary_entry.save!
  end

  # create a tempfile to store entry in progress in EDITOR
  file = Tempfile.new(['diary', '.md'])
  file.sync = true

  # default new entry
  entry_source = {
    day: Time.now.strftime("%F"),
    time: Time.now.strftime("%T"),
    tags: "",
    title: "",
    body: "text goes here"
  }

  # # if --edit option is used with a valid entry, load it
  if opts[:edit] && Diary::Entry.exists?(date_key: opts[:edit])
    entry = Diary::Entry.find(date_key: opts[:edit])
    entry_source = entry.to_hash if entry
    # FIXME: set tags
  end

  # prepare entry and launch editor
  tmpl = Diary::Entry.generate(entry_source)
  file.write(tmpl)

  ed = "vim -f"
  if ENV['DIARY_EDITOR']
    ed = ENV['DIARY_EDITOR']
  elsif ENV['EDITOR']
    ed = ENV['EDITOR']
  end

  pid = fork do
    # split the editor into a separate process
    command = if /%s/ =~ ed
                ed % [file.path]
              else
                "#{ ed } #{ file.path }"
              end
    exec(command)
  end

  # wait for child to finish, exit when the editor exits
  exit_signal = Queue.new
  trap("CLD") do
    Diary.log "CHILD PID #{pid} TERMINATED"
    exit_signal.push(true)
  end

  Diary.log "WAITING FOR EDITOR IN PROCESS #{ pid }"

  # Polling based observation of tempfile, save to Store whenever Entry is updated
  omtime = File.mtime(file.path)
  while true do
    quitter = exit_signal.pop(true) rescue nil

    mtime = File.mtime(file.path)
    if mtime != omtime
      Diary.log "FILE MODIFIED, UPDATING ENTRY"
      parse_and_store(file)
      omtime = mtime
    end

    if quitter
      Diary.debug "QUIT SIGNAL RECEIVED"
      # parse_and_store(file)
      Diary.debug "CLEANING UP..."
      finish(file)
      Diary.debug "EXIT"
      exit 0
    end

    sleep 1
  end
end
