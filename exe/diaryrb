#!/usr/bin/env ruby

require 'diary-ruby'
require 'slop'
require 'launchy'
require 'thread'

DEFAULT_DIARY = "diaryrb.store"

prompt_for_password = false
opts = Slop.parse do |o|
  # o.string '-c', '--configuration', 'config file location'
  o.string '-d', '--diary', "choose diary storage file (leave blank for default, #{DEFAULT_DIARY})"
  o.string '-p', '--passphrase', 'Use given encryption passphrase or prompt if option is used but no passphrase is given.', default: false do |v|
    if v.start_with?('-') || v.nil? || v.strip.size == 0
      prompt_for_password = true
    end
  end

  # usage modes
  o.separator ''
  o.separator "Actions (can't be used in combination):"
  o.bool '-x', '--export', 'export all entries immediately to JSON'
  o.string '-e', '--edit', 'edit a specific post'
  o.bool '-l', '--list', 'list all posts by date'
  o.bool '-s', '--serve', 'start Diary webserver'

  o.separator ''
  o.separator 'Other options:'
  o.bool '-v', '--verbose', 'enable verbose mode'
  o.on '-V', '--version', 'print the version and quit' do
    puts "diaryrb #{ Diary::VERSION }"
    exit
  end
  o.on '-h', '--help', 'show help and quit' do
    puts o
    exit
  end
end

# Global config options
Diary::Configuration.verbose = opts.verbose?

# Get diary name from configuration or command line
_diary = DEFAULT_DIARY
if opts[:diary]
  # ALWAYS prefer the given argument
  _diary = opts[:diary]
elsif Diary::Configuration.exists?
  if Diary::Configuration.has_diary_config?('default')
    Diary.debug "LOADING default DIARY"
    _diary = 'default'
    Diary::Configuration.load_config('default')
  else
    Diary.debug "CONFIG EXISTS, NO DEFAULT. LOADING DIARY #{ _diary }"
  end
end

Diary::Configuration.current_diary = _diary

_passphrase = nil
if prompt_for_password
  require 'io/console'
  print "Enter passphrase (leave blank for none): "
  _passphrase = STDIN.noecho {|io| io.gets}.chomp
elsif opts[:passphrase] && opts[:passphrase].strip.size > 0
  _passphrase = opts[:passphrase]
elsif ENV['PASSPHRASE']
  _passphrase = ENV['PASSPHRASE']
elsif Diary::Configuration.passphrase
  _passphrase = Diary::Configuration.passphrase
end

diary_path = Diary::Configuration.path || Diary::Configuration.current_diary
Diary.debug "LOADING DIARY #{ Diary::Configuration.current_diary } AT PATH #{ diary_path }"
if _passphrase.nil? || _passphrase.size == 0
  Diary.debug "LOADING WITH NO PASSPHRASE!"
  $store = Diary::Store.new(diary_path)
else
  Diary.debug "LOADING WITH PASSPHRASE #{ _passphrase.gsub(/./, '*') }"
  $store = Diary::SecureStore.new(diary_path, _passphrase)
end

# this is like rake db:migrate
$store.write do |db|
  db[:entries] ||= []
  db[:entries] = db[:entries].compact.uniq.sort
  db[:tags] ||= []
end

if opts.export?
  entries = $store.read(:entries)
  puts ''

  if entries.nil? || entries.size == 0
    puts "No entries"
    exit
  else
    require 'json'

    output = []
    entries.uniq.sort.each do |entry_key|
      entry = Diary::Entry.from_store($store.read(entry_key))
      output << entry.to_hash
    end

    puts JSON.pretty_generate(output)
  end
elsif opts.list?
  entries = $store.read(:entries)
  puts ''

  if entries.nil? || entries.size == 0
    puts "No entries"
    exit
  else
    entries.uniq.sort.reverse.each do |entry_key|
      puts "#{ entry_key }   #{ $store.read(entry_key)[:text][0..40].gsub("\n", ' ') }..."
    end
  end
elsif opts.serve?
  Diary::Server.store = $store
  t = Thread.new do
    Diary::Server.run!
  end
  Launchy.open('http://localhost:4567')
  t.join
else
  def finish(file)
    file.close
    file.unlink   # deletes the temp file
  end

  def parse_and_store(file)
    diary_entry = Diary::Parser.parse_file(file)
    $store.write_entry(diary_entry)
  end

  # create a tempfile to store entry in progress in EDITOR
  file = Tempfile.new(['diary', '.md'])
  file.sync = true

  # default new entry
  entry_source = {
    day: Time.now.strftime("%F"),
    time: Time.now.strftime("%T"),
    tags: "",
    title: "",
    text: "text goes here"
  }

  # if --edit option is used with a valid entry, load it
  if opts[:edit] && (entry_hash = $store.read(opts[:edit]))
    entry = Diary::Entry.from_store(entry_hash)
    entry_source = entry.to_hash
    entry_source[:tags] = entry_source[:tags].join(', ')
  end

  # prepare entry and launch editor
  tmpl = Diary::Entry.generate(entry_source, $store)
  file.write(tmpl)

  ed = "vim -f"
  if ENV['DIARY_EDITOR']
    ed = ENV['DIARY_EDITOR']
  elsif ENV['EDITOR']
    ed = ENV['EDITOR']
  end

  pid = fork do
    exec("#{ ed } #{ file.path }")
  end

  # wait for child to finish, exit when the editor exits
  exit_signal = Queue.new

  trap("CLD") do
    Diary.log "CHILD PID #{pid} TERMINATED"
    exit_signal.push(true)
  end

  Diary.log "WAITING FOR EDITOR IN PROCESS #{ pid }"

  # Polling based observation of tempfile, save to Store whenever Entry is updated
  omtime = File.mtime(file.path)
  while true do
    quitter = exit_signal.pop(true) rescue nil

    mtime = File.mtime(file.path)
    if mtime != omtime
      Diary.log "FILE MODIFIED, UPDATING ENTRY"
      parse_and_store(file)
      omtime = mtime
    end

    if quitter
      Diary.debug "QUIT SIGNAL RECEIVED"
      # parse_and_store(file)
      Diary.debug "CLEANING UP..."
      finish(file)
      Diary.debug "EXIT"
      exit 0
    end

    sleep 1
  end
end
